<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2020-2025 Sweden Connect
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:context="http://www.springframework.org/schema/context"
  xmlns:task="http://www.springframework.org/schema/task"
  xmlns:util="http://www.springframework.org/schema/util"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd
    http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">


  <!--
    Register our converters ...
   -->
  <bean id="conversionService" class="org.springframework.context.support.ConversionServiceFactoryBean">
    <property name="converters">
      <list>
        <bean class="se.swedenconnect.security.credential.spring.converters.PropertyToPrivateKeyConverter" />
        <bean class="se.swedenconnect.security.credential.spring.converters.PropertyToX509CertificateConverter" />
      </list>
    </property>
  </bean>

  <!--
    Configurer for the application settings
  -->
  <bean id="appConfig" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer" scope="singleton">
    <property name="placeholderPrefix" value="${" />
    <property name="location" value="classpath:application.properties" />
  </bean>

  <!--
    BasicCredential
   -->
  <bean id="credential1" class="se.swedenconnect.security.credential.BasicCredential">
    <property name="certificate" value="${credential1.certificate}" />
    <property name="privateKey" value="${credential1.private-key}" />
    <property name="name" value="${credential1.name}" />
  </bean>

  <!--
    KeyStoreCredential - where we set each property
   -->
  <bean id="credential2" class="se.swedenconnect.security.credential.KeyStoreCredential">
    <property name="resource" value="${credential2.resource}" />
    <property name="password" value="${credential2.password}" />
    <property name="alias" value="${credential2.alias}" />
    <!-- If keyPassword isn't set we use the same password as 'password'. -->
    <!-- <property name="keyPassword" value="${credential2.key-password}" /> -->
    <!-- If type isn't set we use KeyStore.getDefaultType() -->
    <!-- <property name="type" value="${credential2.type}" /> -->
    <property name="name" value="${credential2.name}" />
  </bean>

  <!--
    KeyStoreCredential - where we use a KeyStoreFactory ...
      This is useful if you have a keystore that holds several credentials ...
   -->
   <bean id="credential2b" class="se.swedenconnect.security.credential.KeyStoreCredential">
    <property name="keyStore" ref="keyStoreFactory" />
    <property name="alias" value="${credential2.alias}" />
    <property name="keyPassword" value="${credential2.key-password}" />
    <property name="name" value="Credential-2b" />
  </bean>

  <bean id="keyStoreFactory" class="se.swedenconnect.security.credential.spring.factory.KeyStoreFactoryBean">
    <property name="resource" value="${credential2.resource}" />
    <property name="password" value="${credential2.password}" />
  </bean>

  <!--
    Pkcs11Credential - mocked
   -->
  <bean id="credential3" class="se.swedenconnect.security.credential.pkcs11.Pkcs11Credential">
    <property name="alias" value="${credential3.alias}" />
    <property name="pin" value="${credential3.pin}" />
    <property name="name" value="${credential3.name}" />
    <property name="configuration" ref="pkcs11conf" />
  </bean>

  <bean id="pkcs11conf" class="se.swedenconnect.security.credential.pkcs11.DefaultPkcs11Configuration">
    <property name="baseProviderName" value="${credential3.configuration.base-provider-name}" />
    <property name="configurationFile" value="${credential3.configuration.configuration-file}" />
  </bean>

  <!--
    KeyStoreCredential for PKCS#11 (as an alternative to Pkcs11Credential)
   -->
  <bean id="credential4" class="se.swedenconnect.security.credential.KeyStoreCredential">
    <property name="provider" value="${credential4.provider}" />
    <property name="pkcs11Configuration" value="${credential4.pkcs11-configuration}" />
    <property name="password" value="${credential4.password}" />
    <property name="alias" value="${credential4.alias}" />
    <property name="keyPassword" value="${credential4.key-password}" />
    <property name="type" value="${credential4.type}" />
    <property name="name" value="${credential4.name}" />
  </bean>

  <!--
    Monitoring
   -->
  <bean id="credentialMonitor" class="se.swedenconnect.security.credential.monitoring.DefaultCredentialMonitorBean">
    <property name="credentials">
      <list>
        <ref bean="credential3" />
        <ref bean="credential4" />
      </list>
    </property>
    <property name="failureCallback">
      <util:constant static-field="se.swedenconnect.security.credential.factory.TestMonitorCallbacks.TEST_FAILURE_CALLBACK"/>
    </property>
    <property name="reloadSuccessCallback">
      <util:constant static-field="se.swedenconnect.security.credential.factory.TestMonitorCallbacks.RELOAD_SUCCESS_CALLBACK"/>
    </property>
    <property name="reloadFailureCallback">
      <util:constant static-field="se.swedenconnect.security.credential.factory.TestMonitorCallbacks.RELOAD_FAILURE_CALLBACK"/>
    </property>
  </bean>

  <task:scheduled-tasks scheduler="monitorScheduler">
    <task:scheduled ref="credentialMonitor" method="test" fixed-delay="1000" initial-delay="1000" />
  </task:scheduled-tasks>

  <task:scheduler id="monitorScheduler" pool-size="10"/>

</beans>
